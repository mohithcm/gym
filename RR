#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
    int PID,AT,BT,CT,TAT,WT,RT,flag;
}Process;

void swap(Process *a,Process *b)
{
    Process temp=*a;
    *a=*b;
    *b=temp;
}

void main()
{
    int n,i,j,tempBT[100];
    printf("Enter the Number of Process:\t");
    scanf("%d",&n);
    Process P[n];
    printf("Enter the details of process:\n\n");
    for(i=0;i<n;i++)
    {
    printf("Enter the arrival time for %d process:\t",i+1);
    scanf("%d",&P[i].AT);
    printf("Enter the burst time for %d process:\t",i+1);
    scanf("%d",&P[i].BT);
    printf("\n");
    tempBT[i]=P[i].BT;
    P[i].PID=i+1;
    P[i].flag=0;
    }
    int quantum;
    printf("Enter the Time Quantum:\t");
    scanf("%d",&quantum);
    for(i=0;i<n-1;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(P[j].AT>P[j+1].AT)
            {
                swap(&P[j],&P[j+1]);    
            }
        }
    }
    int totalTAT=0,avgTAT=0;
    int totalWT=0,avgWT=0;
    int completed=0,exec,et=P[0].AT,f=0,r=0,*wait;
    P[0].flag=1;
    wait=(int*)calloc(n,sizeof(int));
    wait[r]=0;
    while(completed!=n)
    {
        exec=wait[f];
        f=(f+1)%n;
        if(P[exec].BT>quantum)
        {
            P[exec].BT-=quantum;
            et+=quantum;
            printf("|P%d(%d)(%d)",P[exec].PID,quantum,et);
        }
        else 
        {
            et+=P[exec].BT;
            printf("|P%d(%d)(%d)",P[exec].PID,P[exec].BT,et);
            P[exec].BT=0;
            P[exec].CT=et;
            P[exec].TAT=P[exec].CT-P[exec].AT;
            
            totalTAT+=P[exec].TAT;
            P[exec].WT=P[exec].TAT-tempBT[P[exec].PID-1];
            
            totalWT+=P[exec].WT;
        }
        
        for(i=0;i<n&&P[i].AT<=et;i++)
        {
            if(i==exec||P[i].flag==1||P[i].BT==0)
            continue;
            r=(r+1)%n;
            P[i].flag=1;
            wait[r]=i;
        }
        if(P[exec].BT>0)
        {
            r=(r+1)%n;
            wait[r]=exec;
        }
        else
        {
            completed++;
        }
    }
    printf("|");
    printf("\nObservation Table:\n");
    printf("PID\tAT\tBT\tCT\tTAT\tWT\n");
    for(i=0;i<n;i++)
    {
         printf("%d\t%d\t%d\t%d\t%d\t%d\n",P[i].PID,P[i].AT,tempBT[P[i].PID-1],P[i].CT,P[i].TAT,P[i].WT);
    }
    avgTAT=totalTAT/n;
    avgWT=totalWT/n;
    
    printf("\nAverage TurnAroundTime:%d\t",avgTAT);
    printf("\nAverage WaitingTime:%d\t",avgWT);
}



